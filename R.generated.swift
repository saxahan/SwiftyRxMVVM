//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Config-Debug.plist`.
    static let configDebugPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Config-Debug", pathExtension: "plist")
    /// Resource file `Config-Release.plist`.
    static let configReleasePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Config-Release", pathExtension: "plist")
    /// Resource file `Config-Staging.plist`.
    static let configStagingPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Config-Staging", pathExtension: "plist")
    /// Resource file `Staging-Info.plist`.
    static let stagingInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Staging-Info", pathExtension: "plist")
    /// Resource file `get-repository-200-res.json`.
    static let getRepository200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "get-repository-200-res", pathExtension: "json")
    /// Resource file `get-user-200-res.json`.
    static let getUser200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "get-user-200-res", pathExtension: "json")
    /// Resource file `get-user-repos-200-res.json`.
    static let getUserRepos200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "get-user-repos-200-res", pathExtension: "json")
    /// Resource file `search-repositories-200-res.json`.
    static let searchRepositories200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "search-repositories-200-res", pathExtension: "json")
    
    /// `bundle.url(forResource: "Config-Debug", withExtension: "plist")`
    static func configDebugPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configDebugPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Config-Release", withExtension: "plist")`
    static func configReleasePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configReleasePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Config-Staging", withExtension: "plist")`
    static func configStagingPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configStagingPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Staging-Info", withExtension: "plist")`
    static func stagingInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stagingInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "get-repository-200-res", withExtension: "json")`
    static func getRepository200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getRepository200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "get-user-200-res", withExtension: "json")`
    static func getUser200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getUser200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "get-user-repos-200-res", withExtension: "json")`
    static func getUserRepos200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getUserRepos200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "search-repositories-200-res", withExtension: "json")`
    static func searchRepositories200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.searchRepositories200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
