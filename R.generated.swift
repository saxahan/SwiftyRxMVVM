//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Config-Develop.plist`.
    static let configDevelopPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Config-Develop", pathExtension: "plist")
    /// Resource file `Config-Release.plist`.
    static let configReleasePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Config-Release", pathExtension: "plist")
    /// Resource file `Config-Staging.plist`.
    static let configStagingPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Config-Staging", pathExtension: "plist")
    /// Resource file `Staging-Info.plist`.
    static let stagingInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Staging-Info", pathExtension: "plist")
    /// Resource file `get-repository-200-res.json`.
    static let getRepository200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "get-repository-200-res", pathExtension: "json")
    /// Resource file `get-user-200-res.json`.
    static let getUser200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "get-user-200-res", pathExtension: "json")
    /// Resource file `get-user-repos-200-res.json`.
    static let getUserRepos200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "get-user-repos-200-res", pathExtension: "json")
    /// Resource file `search-repositories-200-res.json`.
    static let searchRepositories200ResJson = Rswift.FileResource(bundle: R.hostingBundle, name: "search-repositories-200-res", pathExtension: "json")
    
    /// `bundle.url(forResource: "Config-Develop", withExtension: "plist")`
    static func configDevelopPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configDevelopPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Config-Release", withExtension: "plist")`
    static func configReleasePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configReleasePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Config-Staging", withExtension: "plist")`
    static func configStagingPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configStagingPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Staging-Info", withExtension: "plist")`
    static func stagingInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stagingInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "get-repository-200-res", withExtension: "json")`
    static func getRepository200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getRepository200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "get-user-200-res", withExtension: "json")`
    static func getUser200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getUser200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "get-user-repos-200-res", withExtension: "json")`
    static func getUserRepos200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getUserRepos200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "search-repositories-200-res", withExtension: "json")`
    static func searchRepositories200ResJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.searchRepositories200ResJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `avatar-placeholder`.
    static let avatarPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar-placeholder")
    
    /// `UIImage(named: "avatar-placeholder", bundle: ..., traitCollection: ...)`
    static func avatarPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatarPlaceholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `RepositorySearchTableViewCell`.
    static let repositorySearchTableViewCell = _R.nib._RepositorySearchTableViewCell()
    
    /// `UINib(name: "RepositorySearchTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositorySearchTableViewCell) instead")
    static func repositorySearchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositorySearchTableViewCell)
    }
    
    static func repositorySearchTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RepositorySearchTableViewCell? {
      return R.nib.repositorySearchTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepositorySearchTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `RepositorySearchTableViewCell`.
    static let repositorySearchTableViewCell: Rswift.ReuseIdentifier<RepositorySearchTableViewCell> = Rswift.ReuseIdentifier(identifier: "RepositorySearchTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Repository`.
    static let repository = _R.storyboard.repository()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Repository", bundle: ...)`
    static func repository(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.repository)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _RepositorySearchTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepositorySearchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RepositorySearchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepositorySearchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try repository.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct repository: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Repository"
      let repositorySearchViewController = StoryboardViewControllerResource<RepositorySearchViewController>(identifier: "RepositorySearchViewController")
      
      func repositorySearchViewController(_: Void = ()) -> RepositorySearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: repositorySearchViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.repository().repositorySearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'repositorySearchViewController' could not be loaded from storyboard 'Repository' as 'RepositorySearchViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
